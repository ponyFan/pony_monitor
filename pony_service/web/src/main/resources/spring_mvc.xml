<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

       <context:property-placeholder location="classpath*:config.properties"/>

       <context:component-scan base-package="com.pony"/>

       <mvc:annotation-driven/>

       <!--将返回对象自动转成json格式，不需要手动的建立json对象转换后再返回 -->
       <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
              <property name="supportedMediaTypes">
                     <list>
                            <value>text/html;charset=UTF-8</value>
                     </list>
              </property>
       </bean>
       <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
              <property name="messageConverters">
                     <list>
                            <ref bean="mappingJacksonHttpMessageConverter" />
                     </list>
              </property>
       </bean>


       <!--aop增强; 1、注意aop需要配置在主xml中，或者主xml中引用了改xml；2、引入jar包-->
       <bean id="eatAdvice" class="com.pony.common.aop.EatAdvice"/>

       <!--默认是false用的是jdk的动态代理，true是启用的cglib的动态代理-->
       <aop:config proxy-target-class="true">
              <aop:pointcut id="advice" expression="execution(* com.pony.common.aop.EatServiceImpl.*(..))"/>
              <aop:advisor pointcut-ref="advice" advice-ref="eatAdvice"/>
       </aop:config>



       <!--url拦截-->
       <bean id="interceptor" class="com.pony.common.interceptor.URLInterceptor">
              <property name="excludeUrlList">
                     <list>
                            <value>/test/redirectTest</value>
                            <value>/test/list</value>
                     </list>
              </property>
       </bean>

       <mvc:interceptors>
              <ref bean="interceptor"/>
       </mvc:interceptors>

       <!--jdbc配置-->
       <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
              <property name="driverClassName" value="${jdbc.driver}"/>
              <property name="url" value="${jdbc.url}"/>
              <property name="username" value="${jdbc.user}"/>
              <property name="password" value="${jdbc.password}"/>
              <!-- 初始化连接大小 -->
              <property name="initialSize" value="${jdbc.initialSize}" />
              <!-- 连接池最大数量 -->
              <property name="maxActive" value="${jdbc.maxActive}" />
              <!-- 连接池最大空闲 -->
              <property name="maxIdle" value="${jdbc.maxIdle}" />
              <!-- 连接池最小空闲 -->
              <property name="minIdle" value="${jdbc.minIdle}" />
              <!-- 获取连接最大等待时间 -->
              <property name="maxWait" value="${jdbc.maxWait}" />
       </bean>

       <!--mybatis 配置
       装载载连接池中数据库连接的相关信息，映射mapper文件所在路径-->
       <bean id="sqlFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
              <property name="dataSource" ref="dataSource"/>
              <property name="mapperLocations" value="classpath*:mapper/*.xml"/>
       </bean>

       <!--配置模板-->
       <bean id="sqlTemplate" class="org.mybatis.spring.SqlSessionTemplate">
              <constructor-arg index="0" ref="sqlFactory"/>
       </bean>

       <!--扫描对应的包-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
              <property name="basePackage" value="com.pony.dao"/>
              <property name="sqlSessionFactoryBeanName" value="sqlFactory"/>
       </bean>

       <import resource="spring.xml"/>
</beans>